// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Model untuk Banner/Hero Section
model Banner {
  id          Int       @id @default(autoincrement())
  title       String
  subtitle    String?
  description String?
  image       String?
  price       String?
  rating      Float?
  features    String[]  // Array of strings untuk fitur
  badge       String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("banners")
}

// Model untuk Katalog Produk
model Catalogue {
  id           Int         @id @default(autoincrement())
  jenis        String      // Kategori produk (Elektronik, Furniture, ATK, dll)
  namaBarang   String      // Nama produk
  spesifikasi  String?     // Deskripsi/spesifikasi produk
  qty          Int         @default(0) // Quantity/jumlah stok
  satuan       String      // Unit (Unit, Pcs, Rim, dll)
  hargaSatuan  Float       @default(0) // Harga per unit
  jumlah       Float       @default(0) // Total nilai (qty * hargaSatuan)
  foto         String?     // URL foto produk
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relasi balik
  cartItems    CartItem[]
  orderItems   OrderItem[]

  @@map("catalogues")
}

// Model untuk User/Admin Management (opsional untuk future development)
model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String?
  password  String    // Hash password
  role      UserRole  @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relasi balik
  carts     Cart[]
  orders    Order[]

  @@map("users")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

// Model untuk Keranjang/Cart (untuk fitur keranjang yang sudah ada)
model Cart {
  id           Int         @id @default(autoincrement())
  sessionId    String?     // Session ID untuk guest users
  userId       Int?        // User ID untuk logged in users
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  items        CartItem[]

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("carts")
}

model CartItem {
  id          Int       @id @default(autoincrement())
  cartId      Int
  catalogueId Int
  quantity    Int       @default(1)
  price       Float     // Harga saat item ditambahkan ke cart
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  cart      Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  catalogue Catalogue @relation(fields: [catalogueId], references: [id], onDelete: Cascade)

  @@unique([cartId, catalogueId]) // Prevent duplicate items in same cart
  @@map("cart_items")
}

// Model untuk Order/Pemesanan (untuk future development)
model Order {
  id           Int         @id @default(autoincrement())
  orderNumber  String      @unique
  userId       Int?
  customerName String
  customerEmail String?
  customerPhone String?
  totalAmount  Float
  status       OrderStatus @default(PENDING)
  notes        String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  items        OrderItem[]

  user User? @relation(fields: [userId], references: [id])

  @@map("orders")
}

model OrderItem {
  id          Int    @id @default(autoincrement())
  orderId     Int
  catalogueId Int
  quantity    Int
  price       Float  // Harga saat order dibuat
  productName String // Snapshot nama produk
  
  order     Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  catalogue Catalogue @relation(fields: [catalogueId], references: [id])

  @@map("order_items")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

// Model untuk Company/Perusahaan (untuk invoice header)
model Company {
  id        Int      @id @default(autoincrement())
  name      String
  address   String
  phone     String
  email     String
  website   String?
  logo      String?  // URL to logo image
  isDefault Boolean  @default(false) // Mark default company for invoices
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relasi balik
  invoices  Invoice[]

  @@map("companies")
}

// Model untuk Customer/Pelanggan
model Customer {
  id        Int      @id @default(autoincrement())
  name      String
  company   String?
  address   String
  phone     String
  email     String
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relasi balik
  invoices  Invoice[]

  @@map("customers")
}

// Model untuk Invoice
model Invoice {
  id            Int           @id @default(autoincrement())
  invoiceNumber String        @unique
  companyId     Int
  customerId    Int
  date          DateTime      @default(now())
  dueDate       DateTime
  subtotal      Float         @default(0)
  tax           Float         @default(0)
  serviceCharge Float         @default(0)
  total         Float         @default(0)
  status        InvoiceStatus @default(DRAFT)
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relasi
  company   Company       @relation(fields: [companyId], references: [id])
  customer  Customer      @relation(fields: [customerId], references: [id])
  items     InvoiceItem[]

  @@map("invoices")
}

// Model untuk Invoice Items
model InvoiceItem {
  id            Int     @id @default(autoincrement())
  invoiceId     Int
  name          String
  specification String?
  quantity      Float
  unit          String
  unitPrice     Float
  total         Float
  sortOrder     Int     @default(0) // For ordering items in invoice

  // Relasi
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

// Model untuk Settings/Konfigurasi Website
model Setting {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("settings")
}

// Model untuk Pricing Plans
model PricingPlan {
  id            Int      @id @default(autoincrement())
  name          String   // Basic, Regular, Premium
  subtitle      String
  price         String
  originalPrice String
  discount      String
  description   String
  features      String[] // Array of features
  limitations   String[] // Array of limitations
  popular       Boolean  @default(false)
  color         String   @default("blue") // blue, red, purple, etc
  isActive      Boolean  @default(true)
  sortOrder     Int      @default(0) // For ordering plans
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("pricing_plans")
}
